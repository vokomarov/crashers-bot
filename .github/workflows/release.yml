name: release

on:
  release:
    types: [ published ]

env:
  REPO: vovanms/crashers_bot_api
  NAMESPACE: telegram-bots

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}

      # Build and push Docker image with Build (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 k8s-cash-track

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        run: |
          sed -i 's|<IMAGE>|'${IMAGE}'|' $GITHUB_WORKSPACE/deploy/crashers-bot/deployment.yml
          sed -i 's|<IMAGE>|'${IMAGE}'|' $GITHUB_WORKSPACE/deploy/crashers-bot/cronjob.yml

      - name: Unset Telegram webhook
        continue-on-error: true
        run: kubectl exec -n ${{ env.NAMESPACE }} deployments/crashers-bot -i -- php artisan webhook:unset

      - name: Update MySQL definition
        run: kubectl apply -f $GITHUB_WORKSPACE/deploy/mysql/service.yml

      - name: Trigger deployment
        run: kubectl -n ${{ env.NAMESPACE }} delete pod mysql-0

      - name: Verify MySQL service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=mysql --for condition=Ready --timeout=60s

      - name: Deploy Bot
        run: |
          kubectl apply -f $GITHUB_WORKSPACE/deploy/crashers-bot/config.yml \
                        -f $GITHUB_WORKSPACE/deploy/crashers-bot/service.yml \
                        -f $GITHUB_WORKSPACE/deploy/crashers-bot/cronjob.yml \
                        -f $GITHUB_WORKSPACE/deploy/crashers-bot/deployment.yml

      - name: Verify bot deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/crashers-bot

      - name: Verify bot service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=crashers-bot --for condition=Ready --timeout=15s

      - name: Migrate database
        run: kubectl exec -n ${{ env.NAMESPACE }} deployments/crashers-bot -i -- php artisan migrate --force

      - name: Set Telegram webhook
        run: kubectl exec -n ${{ env.NAMESPACE }} deployments/crashers-bot -i -- php artisan webhook:set
